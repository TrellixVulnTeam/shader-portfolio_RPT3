{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.11",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@theatre/studio!",
  "docComment": "",
  "name": "@theatre/studio",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@theatre/studio!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@theatre/studio!IExtension:interface",
          "docComment": "/**\n * A Theatre.js Studio extension. You can define one either in a separate package, or within your project.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExtension "
            }
          ],
          "releaseTag": "Public",
          "name": "IExtension",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@theatre/studio!IExtension#globalToolbar:member",
              "docComment": "/**\n * Set this if you'd like to add a component to the global toolbar (on the top)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalToolbar?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        component: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "globalToolbar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@theatre/studio!IExtension#id:member",
              "docComment": "/**\n * Pick a unique ID for your extension. Ideally the name would be unique if the extension was to be published to the npm repository.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@theatre/studio!IExtension#panes:member",
              "docComment": "/**\n * Introduces new pane types.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "panes?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PaneClassDefinition",
                  "canonicalReference": "@theatre/studio!PaneClassDefinition:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "panes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@theatre/studio!IScrub:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrub "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrub",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IScrub#capture:member(1)",
              "docComment": "/**\n * Captures operations for the scrub.\n *\n * Note that running `scrub.capture()` multiple times means all the older calls of `scrub.capture()` will be reset.\n *\n * Usage:\n * ```ts\n * scrub.capture(({set}) => {\n *   set(obj.props.x, 10) // set the value of obj.props.x to 10\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "capture(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(api: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrubApi",
                  "canonicalReference": "@theatre/studio!IScrubApi:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "capture"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IScrub#commit:member(1)",
              "docComment": "/**\n * Commits the scrub and creates a single undo level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "commit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IScrub#discard:member(1)",
              "docComment": "/**\n * Clearts the ops of the scrub and destroys it. After calling this, you won't be able to call `scrub.capture()` anymore.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "discard(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "discard"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IScrub#reset:member(1)",
              "docComment": "/**\n * Clears all the ops in the scrub, but keeps the scrub open so you can call `scrub.capture()` again.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@theatre/studio!IStudio:interface",
          "docComment": "/**\n * This is the public api of Theatre's studio. It is exposed through:\n *\n * Basic usage:\n * ```ts\n * import studio from '@theatre/studio'\n *\n * studio.initialize()\n * ```\n *\n * Usage with **tree-shaking**:\n * ```ts\n * import studio from '@theatre/studio'\n *\n * if (process.env.NODE_ENV !== 'production') {\n *   studio.initialize()\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStudio "
            }
          ],
          "releaseTag": "Public",
          "name": "IStudio",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#createContentOfSaveFile:member(1)",
              "docComment": "/**\n * Creates a JSON object that contains the state of the project. You can use this to programmatically save the state of your projects to the storage system of your choice, rather than manually clicking on the \"Export\" button in the UI.\n *\n * @param projectId - same projectId as in `core.getProject(projectId)`\n *\n * Usage:\n * ```ts\n * const projectId = \"project\"\n * const json = studio.createContentOfSaveFile(projectId)\n * const string = JSON.stringify(json)\n * fetch(`/projects/${projectId}/state`, {method: 'POST', body: string}).then(() => {\n *   console.log(\"Saved\")\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createContentOfSaveFile(projectId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "projectId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createContentOfSaveFile"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#createPane:member(1)",
              "docComment": "/**\n * Creates a new pane\n *\n * @param paneClass - The class name of the pane (provided by an extension)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createPane<PaneClass extends "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ">(paneClass: "
                },
                {
                  "kind": "Content",
                  "text": "PaneClass"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PaneInstance",
                  "canonicalReference": "@theatre/studio!PaneInstance:type"
                },
                {
                  "kind": "Content",
                  "text": "<PaneClass>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "paneClass",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "PaneClass",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "createPane"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#debouncedScrub:member(1)",
              "docComment": "/**\n * Creates a debounced scrub, which is just like a normal scrub, but automatically runs scrub.commit() after `threshhold` milliseconds have passed after the last `scrub.capture`.\n *\n * @param threshhold - How long to wait before committing the scrub\n *\n * Usage:\n * ```ts\n * // Will create a new undo-level after 2 seconds have passed\n * // since the last scrub.capture()\n * const scrub = studio.debouncedScrub(2000)\n *\n * // capture some ops\n * scrub.capture(...)\n * // wait one second\n * await delay(1000)\n * // capture more ops but no new undo level is made,\n * // because the last scrub.capture() was called less than 2 seconds ago\n * scrub.capture(...)\n *\n * // wait another seonc and half\n * await delay(1500)\n * // still no new undo level, because less than 2 seconds have passed\n * // since the last capture\n * scrub.capture(...)\n *\n * // wait 3 seconds\n * await delay(3000) // at this point, one undo level is created.\n *\n * // this call to capture will start a new undo level\n * scrub.capture(...)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debouncedScrub(threshhold: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IScrub",
                  "canonicalReference": "@theatre/studio!IScrub:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'capture'>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threshhold",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "debouncedScrub"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#extend:member(1)",
              "docComment": "/**\n * Registers an extension\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extend(\n    extension: "
                },
                {
                  "kind": "Reference",
                  "text": "IExtension",
                  "canonicalReference": "@theatre/studio!IExtension:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extension",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "extend"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#getStudioProject:member(1)",
              "docComment": "/**\n * Returns the Theatre.js project that contains the studio's sheets and objects.\n *\n * It is useful if you'd like to have sheets/objects that are present only when studio is present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStudioProject(): "
                },
                {
                  "kind": "Reference",
                  "text": "IProject",
                  "canonicalReference": "@theatre/core!~IProject:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getStudioProject"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#initialize:member(1)",
              "docComment": "/**\n * Initializes the studio. Call it once in your index.js/index.ts module. It silently ignores subsequent calls.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialize(opts?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        persistenceKey?: string;\n        usePersistentStorage?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "opts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "initialize"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#onSelectionChange:member(1)",
              "docComment": "/**\n * Calls fn every time the current selection changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectionChange(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(s: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISheetObject",
                  "canonicalReference": "@theatre/core!~ISheetObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{}> | "
                },
                {
                  "kind": "Reference",
                  "text": "ISheet",
                  "canonicalReference": "@theatre/core!~ISheet:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "VoidFunction",
                  "canonicalReference": "!VoidFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 8
                  }
                }
              ],
              "name": "onSelectionChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#scrub:member(1)",
              "docComment": "/**\n * Creates a scrub, which is just like a transaction, except you can run it multiple times without creating extra undo levels.\n *\n * Usage:\n * ```ts\n * const scrub = studio.scrub()\n * scrub.capture(({set}) => {\n *   set(obj.props.x, 10) // set the value of obj.props.x to 10\n * })\n *\n * // half a second later...\n * scrub.capture(({set}) => {\n *   set(obj.props.y, 11) // set the value of obj.props.y to 11\n *   // note that since we're not setting obj.props.x, its value reverts back to its old value (ie. not 10)\n * })\n *\n * // then either:\n * scrub.commit() // commits the scrub and creates a single undo level\n * // or:\n * scrub.reset() // clear all the ops in the scrub so we can run scrub.capture() again\n * // or:\n * scrub.discard() // clears the ops and destroys it (ie. can't call scrub.capture() anymore)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrub(): "
                },
                {
                  "kind": "Reference",
                  "text": "IScrub",
                  "canonicalReference": "@theatre/studio!IScrub:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrub"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@theatre/studio!IStudio#selection:member",
              "docComment": "/**\n * The current selection, consisting of Sheets and Sheet Objects\n *\n * Example:\n * ```ts\n * console.log(studio.selection) // => [ISheetObject, ISheet]\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly selection: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISheetObject",
                  "canonicalReference": "@theatre/core!~ISheetObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{}> | "
                },
                {
                  "kind": "Reference",
                  "text": "ISheet",
                  "canonicalReference": "@theatre/core!~ISheet:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#setSelection:member(1)",
              "docComment": "/**\n * Sets the current selection.\n *\n * Usage:\n * ```ts\n * const sheet1: ISheet = ...\n * const obj1: ISheetObject<any> = ...\n *\n * studio.setSelection([sheet1, obj1])\n * ```\n *\n * You can read the current selection from studio.selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelection(selection: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISheetObject",
                  "canonicalReference": "@theatre/core!~ISheetObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | "
                },
                {
                  "kind": "Reference",
                  "text": "ISheet",
                  "canonicalReference": "@theatre/core!~ISheet:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  }
                }
              ],
              "name": "setSelection"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@theatre/studio!IStudio#transaction:member(1)",
              "docComment": "/**\n * Runs an undo-able transaction. Creates a single undo level for all the operations inside the transaction.\n *\n * Will roll back if an error is thrown.\n *\n * Usage:\n * ```ts\n * studio.transaction(({set, unset}) => {\n *   set(obj.props.x, 10) // set the value of obj.props.x to 10\n *   unset(obj.props.y) // unset the override at obj.props.y\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transaction(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(api: "
                },
                {
                  "kind": "Reference",
                  "text": "ITransactionAPI",
                  "canonicalReference": "@theatre/studio!ITransactionAPI:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "transaction"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@theatre/studio!IStudio#ui:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ui: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        hide(): void;\n        readonly isHidden: boolean;\n        restore(): void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ui",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@theatre/studio!studio:var",
          "docComment": "/**\n * The main instance of Studio. Read more at {@link IStudio}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "studio: "
            },
            {
              "kind": "Reference",
              "text": "IStudio",
              "canonicalReference": "@theatre/studio!IStudio:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "studio",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@theatre/studio!ToolbarDropdownSelect:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToolbarDropdownSelect: "
            },
            {
              "kind": "Reference",
              "text": "React.FC",
              "canonicalReference": "@types/react!~React.FC:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    value: string;\n    options: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n        label: string;\n        value: string;\n        icon: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!~React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    }>;\n    onChange: (value: string) => void;\n    label: (cur: {\n        label: string;\n        value: string;\n    }) => string;\n}>"
            }
          ],
          "releaseTag": "Public",
          "name": "ToolbarDropdownSelect",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@theatre/studio!ToolbarIconButton:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToolbarIconButton: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "Container",
              "canonicalReference": "@theatre/studio!~Container:var"
            }
          ],
          "releaseTag": "Public",
          "name": "ToolbarIconButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@theatre/studio!ToolbarSwitchSelect:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToolbarSwitchSelect: "
            },
            {
              "kind": "Content",
              "text": "<Option extends string | number>({ "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "@theatre/studio!~Props#value"
            },
            {
              "kind": "Content",
              "text": ": valueOfSwitch, onChange, options, }: "
            },
            {
              "kind": "Reference",
              "text": "Props",
              "canonicalReference": "@theatre/studio!~Props:interface"
            },
            {
              "kind": "Content",
              "text": "<Option>) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX~Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ToolbarSwitchSelect",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        }
      ]
    }
  ]
}
